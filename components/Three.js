import React, { forwardRef, useRef } from 'react'
import { Canvas } from "@react-three/fiber";
import Box from "../components/Box";
// import OrbitControls from "../components/OrbitControls";
import LightBulb from "../components/Light";
import Floor from "../components/Floor";
import Draggable from "../components/Draggable";
import { Suspense } from "react";
import { Cloud, Stars, Sky, Image, Cylinder, OrbitControls, Environment, useGLTF, Float, TransformControls, QuadraticBezierLine, Backdrop, ContactShadows } from '@react-three/drei'

export default function Three() {
    const spaceman = useRef()
    const ship = useRef()
    function TimeofDay() {
        const start = 7 * 60 + 5;
        const end = 5 * 60 + 57;
        const date = new Date();
        const now = date.getHours() * 60 + date.getMinutes();

        if (start <= now && now <= end) {
            return (<Sky distance={450000} sunPosition={[0, 1, 0]} inclination={0} azimuth={0.25} />)
        }
        else {
            
            return (<><Cloud scale={3} position={[-20, 10, -20]}></Cloud><Stars></Stars></>)
        }
    }

    function LoadImage(props) {

        return <Image {...props} />
    }


    // Auto-generated by: https://github.com/pmndrs/gltfjsx
    const Spaceman = forwardRef(({ children, ...props }, ref) => {
        const { nodes, materials } = useGLTF('/Astronaut-transformed.glb')
        return (
            <mesh
                castShadow
                receiveShadow
                ref={ref}
                {...props}
                geometry={nodes.Astronaut_mesh.geometry}
                material={materials.Astronaut_mat}
                material-envMapIntensity={0}
                dispose={null}>
                {children}
            </mesh>
        )
    });

    // One-click copy/paste from the poimandres market: https://market.pmnd.rs/model/low-poly-spaceship
    const Ship = forwardRef((props, ref) => {
        const { nodes, materials } = useGLTF('https://vazxmixjsiawhamofees.supabase.co/storage/v1/object/public/models/low-poly-spaceship/model.gltf')
        return (
            <group ref={ref} {...props} dispose={null}>
                <mesh castShadow receiveShadow geometry={nodes.Cube005.geometry} material={materials.Mat0} />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_1.geometry} material={materials.Mat1} material-color="black" />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_2.geometry} material={materials.Mat2} material-envMapIntensity={0.2} material-color="black" />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_3.geometry} material={materials.Window_Frame} />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_4.geometry} material={materials.Mat4} />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_5.geometry} material={materials.Mat3} />
                <mesh castShadow receiveShadow geometry={nodes.Cube005_6.geometry} material={materials.Window} />
            </group>
        )
    })

    return (
        <div className="scene">
            <Canvas
                shadows={true}
                className="canvas"
                camera={{
                    position: [-6, 30, 75],
                }}
            >

                <ambientLight color={"white"} intensity={0.3} />

                <LightBulb position={[0, 25, 0]} />
                <Cylinder position={[-4, 8, 12]} rotateOnAxis={(270, 70, 50)}>
                    <meshBasicMaterial color="#9b8549" />
                </Cylinder>
                <Draggable>
                    <Suspense fallback={null}>
                        <Box rotateX={0.8} rotateY={0.2} position={[0, 5, 5]} />
                    </Suspense>
                </Draggable>
                <Draggable>
                    <Suspense fallback={null}>
                        <Box rotateX={3} rotateY={0.2} position={[4, 5, 20]} size={[1, 3, 1]} />
                    </Suspense>
                </Draggable>
                <Suspense fallback={null}>
                    <Box rotateX={3} rotateY={0.2} position={[0, 5, 0]} size={[5, 5, 5]} color="white" image="/xMooney_Logo_Token_1000px_x_1000px.png" />
                </Suspense>
                <Suspense fallback={null}>
                    <Box rotateX={3} rotateY={0.2} position={[25, 10, 25]} size={[5, 5, 5]} />
                </Suspense>
                <Suspense fallback={null}>
                    <Box rotateX={3} rotateY={0.2} position={[-25, 10, 25]} size={[5, 5, 5]} />
                </Suspense>
                <Suspense fallback={null}>
                    <Box rotateX={3} rotateY={0.2} position={[-25, 10, -25]} size={[5, 5, 5]} />
                </Suspense>
                <Suspense fallback={null}>
                    <Box rotateX={3} rotateY={0.2} position={[25, 10, -25]} size={[5, 5, 5]} />
                </Suspense>

                <Image url="/xMooney_Logo_Token_1000px_x_1000px.png"
                    transparent
                    position={[0, 10, -15]}
                    opacity={1}
                    scale={[20, 20, 20]}
                    rotateOnAxis= {([20,21,22], 2)}
                />
                <OrbitControls />
                <Floor color="black" />
                <TimeofDay></TimeofDay>
                {/* <LoadImage
                    position={[5, 10, 10]}
                    url="/xMooney_Logo_Token_1000px_x_1000px.png" transparent
                    opacity={0.5}>
                    rotateY={30}
                </LoadImage> */}

                <Float position={[1, 10, -0.5]} rotation={[-70, 0, 0]} rotationIntensity={4} floatIntensity={6} speed={1.5}>
                    <Spaceman scale={2}>
                        <object3D position={[-0.6, 8, 0]} ref={spaceman} />
                    </Spaceman>
                </Float>
               
                <Float scale={0.75} position={[-10, 10, -10]} rotation={[0, 0.6, 0]}>
                <Ship scale={10} ref={ship}  position={[-10, 10, -10]} />
                </Float>
                
            </Canvas>
        </div>
    );
}